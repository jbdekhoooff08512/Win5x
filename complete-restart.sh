#!/bin/bash
# Win5x Complete Restart Script
# This script clears everything and restarts all services fresh

echo "üîÑ Starting Win5x Complete Restart..."
echo "==============================================="

# Default parameters
DATABASE_PASSWORD="${DATABASE_PASSWORD:-Win5xDB@2024}"
ADMIN_USERNAME="${ADMIN_USERNAME:-admin}"
ADMIN_EMAIL="${ADMIN_EMAIL:-admin@win5x.com}"
ADMIN_PASSWORD="${ADMIN_PASSWORD:-Admin@123}"
REDIS_PASSWORD="${REDIS_PASSWORD:-Redis@2024}"
PROJECT_PATH="${PROJECT_PATH:-/var/www/kart}"
SERVER_IP="${SERVER_IP:-217.148.142.91}"
USER_PORT="${USER_PORT:-8080}"
ADMIN_PORT="${ADMIN_PORT:-8081}"
BACKEND_PORT="${BACKEND_PORT:-8082}"
REDIS_PORT="${REDIS_PORT:-6379}"
POSTGRES_PORT="${POSTGRES_PORT:-5432}"
NGINX_PORT="${NGINX_PORT:-80}"

# Function to run command with error handling
run_safe_command() {
    local command="$1"
    local description="$2"
    
    echo "üìã $description"
    if eval "$command"; then
        echo "‚úÖ $description - Success"
        return 0
    else
        echo "‚ùå $description - Failed"
        return 1
    fi
}

# Navigate to project directory
cd "$PROJECT_PATH" || {
    echo "‚ùå Cannot navigate to project directory: $PROJECT_PATH"
    exit 1
}

echo "üìÅ Working in project directory: $PROJECT_PATH"

# 1. Stop All Services
echo "üõë Stopping All Services..."
echo "==============================================="

# Stop PM2 applications
echo "üìã Stopping PM2 applications..."
pm2 delete all 2>/dev/null || true
pm2 kill 2>/dev/null || true

# Stop Redis
echo "üìã Stopping Redis..."
run_safe_command "sudo systemctl stop redis-server" "Redis service stop"

# Stop Nginx
echo "üìã Stopping Nginx..."
run_safe_command "sudo systemctl stop nginx" "Nginx service stop"

# 2. Clear Node.js Cache and Logs
echo "üßπ Clearing Node.js Cache and Logs..."
echo "==============================================="

# Clear PM2 logs
echo "üìã Clearing PM2 logs..."
pm2 flush 2>/dev/null || true

# Clear application logs
echo "üìã Clearing application logs..."
rm -rf logs/* 2>/dev/null || true
mkdir -p logs

# Clear Node.js cache
echo "üìã Clearing Node.js cache..."
find . -name "node_modules/.cache" -type d -exec rm -rf {} + 2>/dev/null || true

# Clear build artifacts
echo "üìã Clearing build artifacts..."
rm -rf packages/admin/dist 2>/dev/null || true
rm -rf packages/user/dist 2>/dev/null || true
rm -rf packages/backend/dist 2>/dev/null || true

# 3. Restart Redis with Proper Configuration
echo "üî¥ Restarting Redis with Configuration..."
echo "==============================================="

# Configure Redis with password
echo "üìã Configuring Redis..."
cat > /tmp/redis-win5x.conf << EOF
# Redis configuration for Win5x
port $REDIS_PORT
bind 127.0.0.1
requirepass $REDIS_PASSWORD
maxmemory 256mb
maxmemory-policy allkeys-lru
save 900 1
save 300 10
save 60 10000
EOF

# Copy the configuration
run_safe_command "sudo cp /tmp/redis-win5x.conf /etc/redis/redis.conf" "Redis config copy"

# Start Redis
echo "üìã Starting Redis..."
run_safe_command "sudo systemctl start redis-server" "Redis service start"

# Test Redis connection
echo "üìã Testing Redis connection..."
run_safe_command "redis-cli -a $REDIS_PASSWORD ping" "Redis connection test"

# 4. Restart Nginx
echo "üåê Restarting Nginx..."
echo "==============================================="

run_safe_command "sudo systemctl start nginx" "Nginx service start"

# 5. Build Applications
echo "üî® Building Applications..."
echo "==============================================="

# Build admin package
echo "üì¶ Building admin package..."
cd packages/admin
run_safe_command "pnpm run build" "Admin package build"
cd ../..

# Build user package
echo "üì¶ Building user package..."
cd packages/user
run_safe_command "pnpm run build" "User package build"
cd ../..

# Build backend package
echo "üì¶ Building backend package..."
cd packages/backend
run_safe_command "pnpm run build" "Backend package build"
cd ../..

# 6. Start PM2 Applications
echo "üöÄ Starting PM2 Applications..."
echo "==============================================="

# Start applications using ecosystem config
if [ -f "ecosystem.config.js" ]; then
    echo "üìã Starting PM2 applications from ecosystem config..."
    run_safe_command "pm2 start ecosystem.config.js" "PM2 applications start"
else
    echo "üìã Starting PM2 applications manually..."
    
    # Start backend
    run_safe_command "pm2 start packages/backend/dist/server.js --name win5x-backend --cwd $PROJECT_PATH" "Backend application start"
    
    # Start admin panel
    run_safe_command "pm2 start serve --name win5x-admin -- -s packages/admin/dist -p $ADMIN_PORT --cwd $PROJECT_PATH" "Admin panel start"
    
    # Start user panel
    run_safe_command "pm2 start serve --name win5x-user -- -s packages/user/dist -p $USER_PORT --cwd $PROJECT_PATH" "User panel start"
fi

# Save PM2 configuration
run_safe_command "pm2 save" "PM2 configuration save"

# 7. Wait for Services to Start
echo "‚è≥ Waiting for services to start..."
echo "==============================================="

sleep 15

# 8. Test All Endpoints
echo "üåê Testing All Endpoints..."
echo "==============================================="

# Test backend API
echo "üîç Testing backend API..."
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$BACKEND_PORT/api/health" | grep -q "200"; then
    echo "‚úÖ Backend API is responding"
else
    echo "‚ö†Ô∏è Backend API is not responding, checking logs..."
    pm2 logs win5x-backend --lines 5
fi

# Test admin panel
echo "üîç Testing admin panel..."
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$ADMIN_PORT" | grep -q "200"; then
    echo "‚úÖ Admin panel is responding"
else
    echo "‚ö†Ô∏è Admin panel is not responding"
fi

# Test user panel
echo "üîç Testing user panel..."
if curl -s -o /dev/null -w "%{http_code}" "http://localhost:$USER_PORT" | grep -q "200"; then
    echo "‚úÖ User panel is responding"
else
    echo "‚ö†Ô∏è User panel is not responding"
fi

# Test external access
echo "üîç Testing external access..."
if curl -s -o /dev/null -w "%{http_code}" "http://$SERVER_IP:$NGINX_PORT" | grep -q "200"; then
    echo "‚úÖ External access is working"
else
    echo "‚ö†Ô∏è External access is not working"
fi

# 9. Display Complete Status
echo "üìä Complete System Status..."
echo "==============================================="

echo "üîç Service Status:"
echo "‚Ä¢ PostgreSQL: $(systemctl is-active postgresql)"
echo "‚Ä¢ Redis: $(systemctl is-active redis-server)"
echo "‚Ä¢ Nginx: $(systemctl is-active nginx)"
echo ""

echo "üîç PM2 Status:"
pm2 status
echo ""

echo "üîç Port Status:"
echo "‚Ä¢ PostgreSQL ($POSTGRES_PORT): $(netstat -tlnp | grep :$POSTGRES_PORT | wc -l) connections"
echo "‚Ä¢ Redis ($REDIS_PORT): $(netstat -tlnp | grep :$REDIS_PORT | wc -l) connections"
echo "‚Ä¢ Nginx ($NGINX_PORT): $(netstat -tlnp | grep :$NGINX_PORT | wc -l) connections"
echo "‚Ä¢ Backend ($BACKEND_PORT): $(netstat -tlnp | grep :$BACKEND_PORT | wc -l) connections"
echo "‚Ä¢ Admin ($ADMIN_PORT): $(netstat -tlnp | grep :$ADMIN_PORT | wc -l) connections"
echo "‚Ä¢ User ($USER_PORT): $(netstat -tlnp | grep :$USER_PORT | wc -l) connections"
echo ""

echo "üîç System Resources:"
echo "‚Ä¢ CPU Load: $(uptime | awk -F'load average:' '{print $2}')"
echo "‚Ä¢ Memory Usage:"
free -h | grep -E "(Mem|Swap)"
echo "‚Ä¢ Disk Usage:"
df -h | grep -E "(Filesystem|/dev/)"
echo ""

echo "üîç Recent Logs (last 5 lines each):"
echo "Backend Logs:"
pm2 logs win5x-backend --lines 5 --nostream 2>/dev/null || echo "No backend logs"
echo ""
echo "Admin Logs:"
pm2 logs win5x-admin --lines 5 --nostream 2>/dev/null || echo "No admin logs"
echo ""
echo "User Logs:"
pm2 logs win5x-user --lines 5 --nostream 2>/dev/null || echo "No user logs"
echo ""

# 10. Display Final Information
echo "==============================================="
echo "üéâ Win5x Complete Restart Finished!"
echo "==============================================="
echo ""
echo "üìã Restart Summary:"
echo "‚Ä¢ All services stopped and cleared"
echo "‚Ä¢ Node.js cache and logs cleared"
echo "‚Ä¢ Redis restarted with proper configuration"
echo "‚Ä¢ Applications rebuilt and started"
echo "‚Ä¢ All endpoints tested and verified"
echo ""
echo "üåê Access URLs:"
echo "‚Ä¢ User Panel: http://$SERVER_IP:$NGINX_PORT/"
echo "‚Ä¢ Admin Panel: http://$SERVER_IP:$NGINX_PORT/admin"
echo "‚Ä¢ API: http://$SERVER_IP:$NGINX_PORT/api"
echo ""
echo "üîó Direct Access URLs:"
echo "‚Ä¢ User Panel Direct: http://$SERVER_IP:$USER_PORT"
echo "‚Ä¢ Admin Panel Direct: http://$SERVER_IP:$ADMIN_PORT"
echo "‚Ä¢ Backend API Direct: http://$SERVER_IP:$BACKEND_PORT"
echo ""
echo "üë§ Admin Credentials:"
echo "‚Ä¢ Username: $ADMIN_USERNAME"
echo "‚Ä¢ Email: $ADMIN_EMAIL"
echo "‚Ä¢ Password: $ADMIN_PASSWORD"
echo ""
echo "üîß Management Commands:"
echo "‚Ä¢ PM2 Status: pm2 status"
echo "‚Ä¢ PM2 Logs: pm2 logs"
echo "‚Ä¢ PM2 Restart: pm2 restart all"
echo "‚Ä¢ System Status: ./monitor-system.sh"
echo "‚Ä¢ Redis Test: redis-cli -a $REDIS_PASSWORD ping"
echo "‚Ä¢ Database Test: sudo -u postgres psql -d win5x_db -c 'SELECT 1;'"
echo ""
echo "üìÅ Project Location: $PROJECT_PATH"
echo "==============================================="
